[
	{
		"command":"../C/palindromes",
		"language":"C",
		"content":"#include<stdio.h>\n#include<string.h>\n#include<ctype.h>\n\nvoidtrim(char*line)\n{\nintnew_line=strlen(line)-1;\nif(line[new_line]=='\\n')\nline[new_line]='\\0';\n}\n\nvoidreverse(char*str)\n{\nif(str==0||*str==0)\n{\nreturn;\n}\n\nchar*start=str;\nchar*end=start+strlen(str)-1;\nchartemp;\n\nwhile(end>start)\n{\ntemp=*start;\n*start=*end;\n*end=temp;\n\n++start;\n--end;\n}\n}\n\nintmain()\n{\nFILE*fp;\ncharline[50];\nfp=fopen(\"/usr/share/dict/words\",\"r\");\nwhile(fgets(line,sizeof(line),fp)!=NULL)\n{\ntrim(line);\ncharword[50];\nstrcpy(word,line);\nline[0]=tolower(line[0]);\ncharbackwards[50];\nstrcpy(backwards,line);\nreverse(backwards);\nif(strcmp(line,backwards)==0)\nprintf(\"%sisapalindrone\\n\",word);\n}\n}\n"
	},
	{
		"command":"../Go/palindromes",
		"language":"Go",
		"content":"packagemain\n\nimport(\n\t\"bufio\"\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n\t\"strings\"\n)\n\nfuncReverser(sstring)string{\n\tn:=len(s)\n\trunes:=make([]rune,n)\n\tfor_,rune:=ranges{\n\t\tn--\n\t\trunes[n]=rune\n\t}\n\treturnstring(runes[n:])\n}\n\nfuncmain(){\n\tfile,err:=os.Open(\"/usr/share/dict/words\")\n\tdeferfile.Close()\n\tiferr!=nil{\n\t\tlog.Fatal(err)\n\t}\n\n\tscanner:=bufio.NewScanner(file)\n\tforscanner.Scan(){\n\t\tword:=strings.ToLower(scanner.Text())\n\t\tbackwards:=Reverser(word)\n\t\tifword==backwards{\n\t\t\tfmt.Printf(\"%sisapalindrome\\n\",word)\n\t\t}\n\t}\n\n\tiferr:=scanner.Err();err!=nil{\n\t\tlog.Fatal(err)\n\t}\n}\n"
	},
	{
		"command":"../Haskell/palindromes",
		"language":"Haskell",
		"content":"importData.Char\n\nmain::IO()\nmain=do\nfile<-readFile\"/usr/share/dict/words\"\nletwords=linesfile\nmapM_printPalindromewords\n\nisPalindromew=w'==reversew'\nwherew'=maptoLowerw\n\nprintPalindrome::String->IO()\nprintPalindromeword=\nifisPalindromeword\nthenputStrLn(word++\"isapalindrome\")elsereturn()\n"
	},
	{
		"command":"java -classpath /Users/montanaflynn/hacks/palindromes/Java Palindromes",
		"language":"Java",
		"content":"importjava.io.File;\nimportjava.io.FileReader;\nimportjava.io.BufferedReader;\nimportjava.io.IOException;\n\nclassPalindromes\n{\npublicstaticvoidmain(Stringargs[])throwsIOException\n{\nFilefile=newFile(\"/usr/share/dict/words\");\nFileReaderfr=newFileReader(file);\nBufferedReaderbr=newBufferedReader(fr);\nStringword;\nwhile((word=br.readLine())!=null){\nStringforwards=word.toLowerCase();\nStringbackwards=newStringBuffer(forwards).reverse().toString();\nif(forwards.equals(backwards))\nSystem.out.println(String.format(\"%sisapalindrome\",forwards));\n}\nbr.close();\nfr.close();\n}\n}\n"
	},
	{
		"command":"node ../JavaScript/palindromes.js",
		"language":"JavaScript",
		"content":"varfs=require('fs')\n\nvarwords=fs.readFileSync('/usr/share/dict/words').toString().split(\"\\n\")\n\nfor(vari=words.length-1;i>=0;i--){\nif(words[i].length===0)continue\nvarforwards=words[i].toLowerCase()\nvarbackwards=forwards.split(\"\").reverse().join(\"\")\nif(forwards===backwards)console.log(words[i]+\"isapalindrome\")\n}\n"
	},
	{
		"command":"python ../Python/palindromes.py",
		"language":"Python",
		"content":"words=open('/usr/share/dict/words','r').read().split()\nforwordinwords:\nforwards=word.lower()\nifforwards==forwards[::-1]:\nprintword+\"isapalindrome\"\n"
	},
	{
		"command":"ruby ../Ruby/palindromes.rb",
		"language":"Ruby",
		"content":"File.foreach(\"/usr/share/dict/words\"){|word|\nword.chomp!\nforwards=word.downcase\nifforwards==forwards.reverse\nputsword+\"isapalindrome\"\nend\n}\n"
	},
	{
		"command":"../Rust/palindromes",
		"language":"Rust",
		"content":"usestd::io::{File,BufferedReader};\nusestd::iter::order;\nusestd::ascii::StrAsciiExt;\n\nfnmain(){\nletpath=Path::new(\"/usr/share/dict/words\");\nletmutfile=BufferedReader::new(File::open(&path));\nforlineinfile.lines(){\nletline=line.unwrap().as_slice().to_ascii_lower();\nletword=line.as_slice().trim_chars('\\n');\nletforwards=word.chars();\nletbackwards=word.chars().rev();\niforder::eq(forwards,backwards){\nprintln!(\"{}isapalindrome\",word);\n}\n}\n}\n"
	},
	{
		"command":"scala -classpath /Users/montanaflynn/hacks/palindromes/Scala Palindromes",
		"language":"Scala",
		"content":"importscala.io.Source\n\nobjectPalindromes{\n\ndefisPalindrome(s:String):Boolean={\nvalp=s.toLowerCase\np==p.reverse\n}\n\ndefmain(args:Array[String]){\nvalfilename=\"/usr/share/dict/words\"\nfor(word<-Source.fromFile(filename).getLines()){\nif(isPalindrome(word))\nprintln(String.format(\"%sisapalindrome\",word))\n}\n}\n}\n"
	}
]